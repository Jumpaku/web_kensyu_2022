{"version":3,"file":"main.bundle.js","sources":["js/game/Input.js","js/game/Game.js","js/utils/panic.js","js/dependencies/chance.js","js/utils/Random.js","js/tetris/CellSet.js","js/tetris/blocks/BlockBase.js","js/tetris/gridGeometry.js","js/tetris/blocks/BlockI.js","js/tetris/blocks/BlockJ.js","js/tetris/blocks/BlockL.js","js/tetris/blocks/BlockO.js","js/tetris/blocks/BlockS.js","js/tetris/blocks/BlockT.js","js/tetris/blocks/BlockZ.js","js/tetris/Board.js","js/tetris/Tetris.js","js/scenes/ResultScene.js","js/scenes/PlayScene.js","js/scenes/DebugScene.js","js/scenes/StartScene.js","js/main.js"],"sourcesContent":["export class KeyInput {\n    constructor() {\n        $(window).on(\"keydown\", (e) => {\n            const prevCount = this._down.get(e.code) ?? 0;\n            this._down.set(e.code, prevCount + 1);\n        });\n        $(window).on(\"keyup\", (e) => {\n            const prevCount = this._up.get(e.code) ?? 0;\n            this._up.set(e.code, prevCount + 1);\n        });\n    }\n    _down = new Map();\n    _up = new Map();\n    reset() {\n        this._down = new Map();\n        this._up = new Map();\n    }\n    down(code) {\n        return this._down.get(code) ?? 0;\n    }\n    up(code) {\n        return this._up.get(code) ?? 0;\n    }\n}\n","import { KeyInput } from \"./Input\";\nexport class Game {\n    constructor(initialScene) {\n        this.performFrame = this.performFrame.bind(this);\n        this.currentScene = initialScene;\n        this.input = { key: new KeyInput() };\n    }\n    currentScene;\n    input;\n    start() {\n        window.requestAnimationFrame(this.performFrame);\n    }\n    performFrame(timeMicroseconds) {\n        const timeSeconds = timeMicroseconds / 1000.0;\n        this.currentScene = this.currentScene.update(timeSeconds, this.input);\n        this.currentScene.draw();\n        this.input.key.reset();\n        window.requestAnimationFrame(this.performFrame);\n    }\n}\n","export function panic(message) {\n    throw new Error(message);\n}\n","const Chance = window.Chance;\nexport default Chance;\n","import Chance from \"../dependencies/chance\";\nexport class Random {\n    seed;\n    constructor(seed) {\n        this.seed = seed;\n    }\n    shuffle(array) {\n        const result = [...array];\n        return new Chance(this.seed).shuffle(result);\n    }\n    next() {\n        const c = new Chance(this.seed);\n        return new Random(c.integer() - c.integer());\n    }\n}\n","import Immutable from \"../dependencies/immutable\";\nexport class CellSet {\n    constructor(cells) {\n        this.cells = Immutable.Set(cells);\n    }\n    cells;\n    equals(other) {\n        return this.cells.equals(other.cells);\n    }\n    union(other) {\n        return new CellSet(this.cells.union(other.cells));\n    }\n    intersect(other) {\n        return new CellSet(this.cells.intersect(other.cells));\n    }\n    remove(other) {\n        return new CellSet(this.cells.subtract(other.cells));\n    }\n    has(pos) {\n        return this.cells.has(pos);\n    }\n    isEmpty() {\n        return this.cells.isEmpty();\n    }\n    toArray() {\n        return this.cells.toArray();\n    }\n}\n","import { CellSet } from \"../CellSet\";\nexport class BlockBase extends CellSet {\n    state;\n    base;\n    name;\n    constructor(state, base, name, cells) {\n        super(cells);\n        this.state = state;\n        this.base = base;\n        this.name = name;\n    }\n    rotate(clockwise) {\n        return clockwise\n            ? this.with({\n                state: ((this.state + 3) % 4),\n                base: this.base,\n            })\n            : this.with({\n                state: ((this.state + 1) % 4),\n                base: this.base,\n            });\n    }\n    move(delta) {\n        return this.with({\n            state: this.state,\n            base: this.base.move(delta),\n        });\n    }\n}\n","import Immutable from \"../dependencies/immutable\";\nexport class Move {\n    rowDelta;\n    colDelta;\n    static up() {\n        return new Move(-1, 0);\n    }\n    static down() {\n        return new Move(1, 0);\n    }\n    static right() {\n        return new Move(0, 1);\n    }\n    static left() {\n        return new Move(0, -1);\n    }\n    constructor(rowDelta, colDelta) {\n        this.rowDelta = rowDelta;\n        this.colDelta = colDelta;\n        if (!(this instanceof Move))\n            return new Move(rowDelta, colDelta);\n    }\n    equals(other) {\n        return (other instanceof Move &&\n            this.rowDelta === other.rowDelta &&\n            this.colDelta === other.colDelta);\n    }\n    hashCode() {\n        return Immutable.hash(this.rowDelta) - Immutable.hash(this.colDelta);\n    }\n    move(other) {\n        return other.move(this);\n    }\n}\nexport class Pos {\n    row;\n    col;\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n        if (!(this instanceof Pos))\n            return new Pos(row, col);\n    }\n    equals(other) {\n        return (other instanceof Pos && this.row === other.row && this.col === other.col);\n    }\n    hashCode() {\n        return Immutable.hash(this.row) - Immutable.hash(this.col);\n    }\n    move(other) {\n        return new Pos(this.row + other.rowDelta, this.col + other.colDelta);\n    }\n    diff(other) {\n        return new Move(this.row - other.row, this.col - other.col);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockI extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [0, 0, 0, 0],\n                [1, 1, 1, 1],\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n            ],\n            [\n                [0, 1, 0, 0],\n                [0, 1, 0, 0],\n                [0, 1, 0, 0],\n                [0, 1, 0, 0],\n            ],\n            [\n                [0, 0, 0, 0],\n                [0, 0, 0, 0],\n                [1, 1, 1, 1],\n                [0, 0, 0, 0],\n            ],\n            [\n                [0, 0, 1, 0],\n                [0, 0, 1, 0],\n                [0, 0, 1, 0],\n                [0, 0, 1, 0],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 4; i++) {\n                for (let j = 0; j < 4; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"I\", BlockI.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockI(state, base);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockJ extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [1, 0, 0],\n                [1, 1, 1],\n                [0, 0, 0],\n            ],\n            [\n                [0, 1, 0],\n                [0, 1, 0],\n                [1, 1, 0],\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [0, 0, 1],\n            ],\n            [\n                [0, 1, 1],\n                [0, 1, 0],\n                [0, 1, 0],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 3; i++) {\n                for (let j = 0; j < 3; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"J\", BlockJ.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockJ(state, base);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockL extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [0, 0, 1],\n                [1, 1, 1],\n                [0, 0, 0],\n            ],\n            [\n                [1, 1, 0],\n                [0, 1, 0],\n                [0, 1, 0],\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [1, 0, 0],\n            ],\n            [\n                [0, 1, 0],\n                [0, 1, 0],\n                [0, 1, 1],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 3; i++) {\n                for (let j = 0; j < 3; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"L\", BlockL.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockL(state, base);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockO extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [1, 1],\n                [1, 1],\n            ],\n            [\n                [1, 1],\n                [1, 1],\n            ],\n            [\n                [1, 1],\n                [1, 1],\n            ],\n            [\n                [1, 1],\n                [1, 1],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j < 2; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"O\", BlockO.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockO(state, base);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockS extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [0, 1, 1],\n                [1, 1, 0],\n                [0, 0, 0],\n            ],\n            [\n                [1, 0, 0],\n                [1, 1, 0],\n                [0, 1, 0],\n            ],\n            [\n                [0, 0, 0],\n                [0, 1, 1],\n                [1, 1, 0],\n            ],\n            [\n                [0, 1, 0],\n                [0, 1, 1],\n                [0, 0, 1],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 3; i++) {\n                for (let j = 0; j < 3; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"S\", BlockS.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockS(state, base);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockT extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [0, 1, 0],\n                [1, 1, 1],\n                [0, 0, 0],\n            ],\n            [\n                [0, 1, 0],\n                [1, 1, 0],\n                [0, 1, 0],\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 1],\n                [0, 1, 0],\n            ],\n            [\n                [0, 1, 0],\n                [0, 1, 1],\n                [0, 1, 0],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 3; i++) {\n                for (let j = 0; j < 3; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"T\", BlockT.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockT(state, base);\n    }\n}\n","import { BlockBase } from \"./BlockBase\";\nimport { Move } from \"../gridGeometry\";\nimport Immutable from \"../../dependencies/immutable\";\nexport class BlockZ extends BlockBase {\n    static makeCells(state, base) {\n        const cellExists = [\n            [\n                [1, 1, 0],\n                [0, 1, 1],\n                [0, 0, 0],\n            ],\n            [\n                [0, 1, 0],\n                [1, 1, 0],\n                [1, 0, 0],\n            ],\n            [\n                [0, 0, 0],\n                [1, 1, 0],\n                [0, 1, 1],\n            ],\n            [\n                [0, 0, 1],\n                [0, 1, 1],\n                [0, 1, 0],\n            ],\n        ];\n        const cells = Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < 3; i++) {\n                for (let j = 0; j < 3; j++) {\n                    if (cellExists[state][i][j]) {\n                        mutable.add(base.move(new Move(i, j)));\n                    }\n                }\n            }\n        });\n        return cells;\n    }\n    constructor(state, base) {\n        super(state, base, \"Z\", BlockZ.makeCells(state, base));\n    }\n    with({ state, base }) {\n        return new BlockZ(state, base);\n    }\n}\n","import Immutable from \"../dependencies/immutable\";\nimport { CellSet } from \"./CellSet\";\nimport { Pos } from \"./gridGeometry\";\nexport class Board extends CellSet {\n    rows;\n    columns;\n    constructor(rows, columns) {\n        super(Immutable.Set().withMutations((mutable) => {\n            for (let i = 0; i < rows; i++) {\n                for (let j = 0; j < columns; j++) {\n                    mutable.add(new Pos(i, j));\n                }\n            }\n        }));\n        this.rows = rows;\n        this.columns = columns;\n    }\n}\n","import Immutable from \"immutable\";\nimport { panic } from \"../utils/panic\";\nimport { Random } from \"../utils/Random\";\nimport { BlockI } from \"./blocks/BlockI\";\nimport { BlockJ } from \"./blocks/BlockJ\";\nimport { BlockL } from \"./blocks/BlockL\";\nimport { BlockO } from \"./blocks/BlockO\";\nimport { BlockS } from \"./blocks/BlockS\";\nimport { BlockT } from \"./blocks/BlockT\";\nimport { BlockZ } from \"./blocks/BlockZ\";\nimport { Board } from \"./Board\";\nimport { CellSet } from \"./CellSet\";\nimport { Move, Pos } from \"./gridGeometry\";\nexport function Tetris(config, random) {\n    return new TetrisImpl(config, random);\n}\nexport class TetrisImpl {\n    config;\n    static nextPreparedBlocks(random) {\n        return random.shuffle([\n            new BlockI(0, new Pos(0, 3)),\n            new BlockJ(0, new Pos(0, 3)),\n            new BlockL(0, new Pos(0, 3)),\n            new BlockO(0, new Pos(0, 4)),\n            new BlockS(0, new Pos(0, 3)),\n            new BlockT(0, new Pos(0, 3)),\n            new BlockZ(0, new Pos(0, 3)),\n        ]);\n    }\n    constructor(config, stateOrRandom) {\n        this.config = config;\n        if (stateOrRandom instanceof Random) {\n            this.state = {\n                board: new Board(config.rows, config.columns),\n                random: stateOrRandom.next(),\n                heldBlock: null,\n                canHold: true,\n                remainingCells: new CellSet(),\n                tag: \"PrepareNext\",\n                blockQueue: TetrisImpl.nextPreparedBlocks(stateOrRandom),\n                currentBlock: null,\n            };\n        }\n        else {\n            this.state = stateOrRandom;\n        }\n    }\n    state;\n    getBlockQueue() {\n        const [b0, b1, b2, b3, b4, b5, b6, ..._] = this.state.blockQueue;\n        return [b0, b1, b2, b3, b4, b5, b6];\n    }\n    newOperateResultNoChange() {\n        return {\n            tag: \"Ok\",\n            changed: false,\n            tetris: this,\n        };\n    }\n    newOperateResult(newState) {\n        return {\n            tag: \"Ok\",\n            changed: true,\n            tetris: new TetrisImpl(this.config, newState),\n        };\n    }\n    newDownBlockResult(newState) {\n        return {\n            tag: \"Ok\",\n            tetris: new TetrisImpl(this.config, newState),\n        };\n    }\n    newNextBlockResult(newState, removedLines) {\n        return {\n            tag: \"Ok\",\n            removedLines: removedLines,\n            tetris: new TetrisImpl(this.config, newState),\n        };\n    }\n    newTetrisError(message) {\n        return { tag: \"Err\", message: message };\n    }\n    blocksAreAcceptable(currentBlock, board, remainingCells) {\n        return (currentBlock.remove(board).isEmpty() &&\n            remainingCells.remove(board).isEmpty() &&\n            currentBlock.intersect(remainingCells).isEmpty() &&\n            remainingCells\n                .toArray()\n                .map(({ row }) => row > 1)\n                .reduce((a, b) => a && b, true));\n    }\n    operateRotate(clockwise) {\n        console.log(`operateRotate(clockwise:${clockwise})`);\n        const { tag: stateTag, currentBlock, board, remainingCells } = this.state;\n        if (stateTag !== \"WaitDown\")\n            panic(\"operateRotate method must be called in WaitDown state\");\n        const rotated = currentBlock?.rotate(clockwise);\n        if (rotated == null ||\n            !this.blocksAreAcceptable(rotated, board, remainingCells))\n            return this.newOperateResultNoChange();\n        return this.newOperateResult({\n            ...this.state,\n            currentBlock: rotated,\n        });\n    }\n    operateMove(toRight) {\n        console.log(`operateMove(toRight:${toRight})`);\n        const { tag: stateTag, currentBlock, board, remainingCells } = this.state;\n        if (stateTag !== \"WaitDown\")\n            panic(\"operateMove method must be called in WaitDown state\");\n        const moved = currentBlock?.move(toRight ? Move.right() : Move.left());\n        if (moved == null ||\n            !this.blocksAreAcceptable(moved, board, remainingCells))\n            return this.newOperateResultNoChange();\n        return this.newOperateResult({\n            ...this.state,\n            currentBlock: moved,\n        });\n    }\n    getGhost() {\n        const { tag: stateTag, currentBlock, board, remainingCells } = this.state;\n        let before = currentBlock;\n        if (before == null)\n            return null;\n        let after = before.move(Move.down());\n        while (true) {\n            if (!this.blocksAreAcceptable(after, board, remainingCells))\n                return before;\n            before = after;\n            after = before.move(Move.down());\n        }\n    }\n    operateDrop() {\n        console.log(\"operateDrop()\");\n        const { tag: stateTag, currentBlock } = this.state;\n        if (stateTag !== \"WaitDown\")\n            panic(\"operateDrop method must be called in WaitDown state\");\n        const ghost = this.getGhost();\n        if (ghost == null || ghost.equals(currentBlock))\n            return this.newOperateResultNoChange();\n        return this.newOperateResult({ ...this.state, currentBlock: ghost });\n    }\n    operateHold() {\n        console.log(\"operateHold()\");\n        const { tag, canHold, currentBlock, blockQueue, heldBlock, random } = this.state;\n        if (tag !== \"WaitDown\")\n            return panic(\"operateDrop method must be called in WaitDown state\");\n        if (!canHold)\n            return this.newOperateResultNoChange();\n        const toBeHeld = new Map([\n            [\"I\", new BlockI(0, new Pos(0, 3))],\n            [\"J\", new BlockJ(0, new Pos(0, 3))],\n            [\"L\", new BlockL(0, new Pos(0, 3))],\n            [\"O\", new BlockO(0, new Pos(0, 4))],\n            [\"S\", new BlockS(0, new Pos(0, 3))],\n            [\"T\", new BlockT(0, new Pos(0, 3))],\n            [\"Z\", new BlockZ(0, new Pos(0, 3))],\n        ]).get(currentBlock.name);\n        if (heldBlock == null) {\n            const [next, prepared] = TetrisImpl.prepareBlockQueue(blockQueue, random);\n            return this.newOperateResult({\n                ...this.state,\n                heldBlock: toBeHeld,\n                currentBlock: next,\n                blockQueue: prepared,\n                random: random.next(),\n            });\n        }\n        else {\n            const next = heldBlock;\n            return this.newOperateResult({\n                ...this.state,\n                heldBlock: toBeHeld,\n                currentBlock: next,\n                canHold: false,\n            });\n        }\n    }\n    downBlock() {\n        console.log(\"downBlock\");\n        const { tag: stateTag, currentBlock, board, remainingCells } = this.state;\n        if (stateTag !== \"WaitDown\")\n            panic(\"downBlock method must be called in WaitDown state\");\n        let moved = currentBlock?.move(Move.down());\n        if (moved == null ||\n            !this.blocksAreAcceptable(moved, board, remainingCells))\n            return this.newDownBlockResult({\n                ...this.state,\n                tag: \"PrepareNext\",\n                currentBlock: null,\n                remainingCells: remainingCells.union(currentBlock),\n            });\n        return this.newDownBlockResult({ ...this.state, currentBlock: moved });\n    }\n    getRemovedLines() {\n        const { currentBlock, remainingCells } = this.state;\n        let remaining = remainingCells.union(currentBlock ?? new CellSet());\n        const removedLines = new Map();\n        for (let i = 0; i < this.config.rows; i++) {\n            const line = Immutable.Set().withMutations((mutable) => {\n                for (let j = 0; j < this.config.columns; j++) {\n                    const cell = new Pos(i, j);\n                    if (remaining.has(cell))\n                        mutable.add(cell);\n                }\n            });\n            if (line.size === this.config.columns)\n                removedLines.set(i, new CellSet(line));\n        }\n        return removedLines;\n    }\n    removeLines() {\n        const { currentBlock, remainingCells } = this.state;\n        const removedLines = this.getRemovedLines();\n        let remaining = remainingCells.union(currentBlock ?? new CellSet());\n        for (let i = 0; i < this.config.rows; i++) {\n            if (!removedLines.has(i))\n                continue;\n            const down = remaining\n                .toArray()\n                .filter((pos) => pos.row < i)\n                .map((pos) => pos.move(Move.down()));\n            const stay = remaining.toArray().filter((pos) => pos.row > i);\n            remaining = new CellSet(stay).union(new CellSet(down));\n        }\n        return [removedLines, remaining];\n    }\n    static prepareBlockQueue(blockQueue, random) {\n        let [next, ...prepared] = blockQueue;\n        if (prepared.length < 7) {\n            prepared.push(...TetrisImpl.nextPreparedBlocks(random));\n        }\n        return [next, prepared];\n    }\n    nextBlock() {\n        const { tag: stateTag, board, blockQueue, random, canHold } = this.state;\n        console.log(\"nextBlock\", stateTag);\n        if (stateTag !== \"PrepareNext\")\n            return this.newTetrisError(\"nextBlock method must be called in PrepareNext state\");\n        const [removedLines, remaining] = this.removeLines();\n        const [next, prepared] = TetrisImpl.prepareBlockQueue(blockQueue, random);\n        if (!this.blocksAreAcceptable(next, board, remaining))\n            return this.newNextBlockResult({\n                ...this.state,\n                currentBlock: next,\n                tag: \"GameOver\",\n            }, removedLines);\n        return this.newNextBlockResult({\n            ...this.state,\n            tag: \"WaitDown\",\n            currentBlock: next,\n            blockQueue: prepared,\n            remainingCells: remaining,\n            random: random.next(),\n            canHold: true,\n        }, removedLines);\n    }\n}\n","import { StartScene } from \"./StartScene\";\nexport class ResultScene {\n    removedLines;\n    constructor(removedLines) {\n        this.removedLines = removedLines;\n        $(\"#removed-lines\").val(removedLines);\n        $(\"#result\").show();\n    }\n    update(time, input) {\n        if (input.key.down(\"Space\")) {\n            $(\"#result\").hide();\n            return new StartScene();\n        }\n        return this;\n    }\n    draw() { }\n}\n","import { Tetris } from \"../tetris/Tetris\";\nimport { Random } from \"../utils/Random\";\nimport { ResultScene } from \"./ResultScene\";\nexport class PlayScene {\n    config;\n    tetris;\n    prevDownTime = Number.NaN;\n    removedLines = 0;\n    constructor(config) {\n        this.config = config;\n        $(\"#play\").show();\n        this.tetris = Tetris({\n            columns: config.columns,\n            rows: config.rows,\n        }, new Random(config.seed));\n        const bgm = $(\"#bgm\")[0];\n        bgm.volume = bgm.volume * 0.5;\n        bgm.currentTime = 0;\n        bgm.loop = true;\n        bgm.play();\n    }\n    shouldUpdate(time, input) {\n        return time - this.prevDownTime >= this.config.waitDownTimeSpan;\n    }\n    update(time, input) {\n        this.updateCommon(time, input);\n        switch (this.tetris.state.tag) {\n            case \"PrepareNext\":\n                return this.updatePrepareNext(time, input);\n            case \"WaitDown\":\n                return this.updateWaitDown(time, input);\n            case \"GameOver\":\n                return this.updateGameOver(time, input);\n        }\n    }\n    updateCommon(time, input) {\n        this.prevDownTime = Number.isNaN(this.prevDownTime)\n            ? time\n            : this.prevDownTime;\n    }\n    updatePrepareNext(time, input) {\n        if (!this.shouldUpdate(time, input))\n            return this;\n        const t = this.tetris.nextBlock();\n        if (t.tag === \"Err\")\n            console.log(t.message);\n        else {\n            this.prevDownTime = time;\n            this.tetris = t.tetris;\n            this.removedLines += t.removedLines.size;\n        }\n        return this;\n    }\n    updateWaitDown(time, input) {\n        const _this = this;\n        function updateByKey(keycode, operate) {\n            if (input.key.down(keycode) === 0)\n                return;\n            const result = operate();\n            if (result.changed === false)\n                return;\n            _this.tetris = result.tetris;\n            const audio = $(\"#se-click\")[0];\n            audio.currentTime = 0;\n            audio.play();\n        }\n        updateByKey(\"KeyA\", () => this.tetris.operateRotate(false));\n        updateByKey(\"KeyD\", () => this.tetris.operateRotate(true));\n        updateByKey(\"ArrowLeft\", () => this.tetris.operateMove(false));\n        updateByKey(\"ArrowRight\", () => this.tetris.operateMove(true));\n        updateByKey(\"ArrowDown\", () => this.tetris.operateDrop());\n        updateByKey(\"ArrowUp\", () => this.tetris.operateHold());\n        if (!this.shouldUpdate(time, input))\n            return this;\n        const t = this.tetris.downBlock();\n        if (t.tag === \"Err\")\n            console.log(t.message);\n        else {\n            this.prevDownTime = time;\n            this.tetris = t.tetris;\n        }\n        return this;\n    }\n    updateGameOver(time, input) {\n        if (!this.shouldUpdate(time, input))\n            return this;\n        const bgm = $(\"#bgm\")[0];\n        bgm.pause();\n        $(\"#play\").hide();\n        return new ResultScene(this.removedLines);\n    }\n    draw() {\n        const { board, currentBlock, remainingCells, heldBlock, tag } = this.tetris.state;\n        const g = $(\"#main-canvas\")[0].getContext(\"2d\");\n        // クリア\n        g.clearRect(0, 0, 480, 640);\n        const cellSize = 20;\n        // 盤面\n        const lineWidth = 5;\n        const boardOriginX = 140;\n        const boardOriginY = 100;\n        g.lineWidth = lineWidth;\n        g.strokeStyle = \"black\";\n        g.strokeRect(boardOriginX - lineWidth, boardOriginY - lineWidth, cellSize * board.columns + 2 * lineWidth, cellSize * board.rows + 2 * lineWidth);\n        // 残存ブロック\n        for (const { col, row } of remainingCells.toArray()) {\n            g.fillStyle = \"black\";\n            g.fillRect(boardOriginX + cellSize * col + 1, boardOriginY + cellSize * row + 1, cellSize - 2, cellSize - 2);\n        }\n        // ゴーストブロック\n        if (tag === \"WaitDown\") {\n            const ghost = this.tetris.getGhost();\n            for (const { col, row } of ghost.toArray()) {\n                g.fillStyle = \" gray\";\n                g.fillRect(boardOriginX + cellSize * col + 1, boardOriginY + cellSize * row + 1, cellSize - 2, cellSize - 2);\n            }\n        }\n        // ホールドブロック\n        const holdOriginX = -20;\n        const holdOriginY = 50;\n        if (heldBlock != null) {\n            for (const { col, row } of heldBlock.toArray()) {\n                g.fillStyle = \"black\";\n                g.fillRect(holdOriginX + cellSize * col + 1, holdOriginY + cellSize * row + 1, cellSize - 2, cellSize - 2);\n            }\n        }\n        // 現在のブロック\n        if (currentBlock != null) {\n            for (const { col, row } of currentBlock.toArray()) {\n                g.fillStyle = \"orange\";\n                g.fillRect(boardOriginX + cellSize * col + 1, boardOriginY + cellSize * row + 1, cellSize - 2, cellSize - 2);\n            }\n        }\n        // 削除マス\n        for (const [_, removedCells] of this.tetris.getRemovedLines()) {\n            for (const { col, row } of removedCells.toArray()) {\n                g.fillStyle = \"red\";\n                g.fillRect(boardOriginX + cellSize * col + 1, boardOriginY + cellSize * row + 1, cellSize - 2, cellSize - 2);\n            }\n        }\n        // 後続ブロック\n        const blockQueue = this.tetris.getBlockQueue();\n        const queueOriginX = 300;\n        const queueOriginY = 50;\n        for (let i = 0; i < 7; ++i) {\n            const block = blockQueue[i];\n            for (const { col, row } of block.toArray()) {\n                g.fillStyle = \"black\";\n                g.fillRect(queueOriginX + cellSize * col + 1, queueOriginY + i * 50 + cellSize * row + 1, cellSize - 2, cellSize - 2);\n            }\n        }\n    }\n}\n","import { PlayScene } from \"./PlayScene\";\nexport class DebugScene extends PlayScene {\n    constructor(config) {\n        super({ ...config, waitDownTimeSpan: NaN });\n    }\n    shouldUpdate(time, input) {\n        return input.key.down(\"Space\") > 0;\n    }\n}\n","import { DebugScene } from \"./DebugScene\";\nimport { PlayScene } from \"./PlayScene\";\nexport class StartScene {\n    constructor() {\n        $(\"#start\").show();\n    }\n    update(time, input) {\n        if (input.key.down(\"Space\")) {\n            $(\"#start\").hide();\n            return new PlayScene({\n                columns: 10,\n                rows: 20,\n                seed: new Date().getUTCMilliseconds() + time,\n                waitDownTimeSpan: 0.5,\n            });\n        }\n        if (input.key.down(\"Escape\")) {\n            $(\"#start\").hide();\n            return new DebugScene({\n                columns: 10,\n                rows: 20,\n                seed: 123456,\n            });\n        }\n        return this;\n    }\n    draw() {\n        const g = $(\"#main-canvas\")[0].getContext(\"2d\");\n        // クリア\n        g.clearRect(0, 0, 480, 640);\n        g.fillStyle = \"black\";\n        g.fillText(\"Press Space Key!\", 200, 200);\n    }\n}\n","import { Game } from \"./game/Game\";\nimport { StartScene } from \"./scenes/StartScene\";\n$(() => {\n    $(\"main > div\").hide();\n    new Game(new StartScene()).start();\n});\n"],"names":["Immutable"],"mappings":"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"}